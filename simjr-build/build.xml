<?xml version="1.0" encoding="UTF-8"?>
<project default="dist" name="simjr" basedir="." xmlns:ant4eclipse="antlib:org.ant4eclipse">
  <!--
  ant -lib tools/org.ant4eclipse_1.0.0.M3/org.ant4eclipse_<version>.jar -lib tools/org.ant4eclipse_1.0.0.M3/libs
  -->

  <!-- define ant4eclipse tasks -->
  <taskdef uri="antlib:org.ant4eclipse" resource="org/ant4eclipse/antlib.xml"/>

  <!-- import the ant4eclipse pde macros -->
  <import file="${basedir}/tools/org.ant4eclipse_1.0.0-b44de7/macros/a4e-pde-macros.xml" />

  <target name="env-init">
    <tstamp/>

  	<property environment="env"/>
    <property name="workspaceDirectory" value="${basedir}/.." />
    <property file="build.properties"/>
    <property name="build.dir" location="."/>
    <property name="target" location="${build.dir}/target" />
    <property name="test.reports.dir" location="${target}/test-reports" />
    <property name="dist" location="${build.dir}/dist" />
    <property name="dist.name" value="${ant.project.name}-${version}"/>
    <property name="dist.zip" location="${dist.name}.zip"/>
  </target>

  <target name="clean" depends="env-init">
    <delete dir="${target}"/>
    <delete dir="${dist}"/>
    <delete file="${dist.zip}"/>
  </target>

  <target name="init" depends="env-init">

    <!-- define your jdk location here -->
    <ant4eclipse:installedJREs>
      <jre id="jdk16" location="${env.JAVA_HOME}" />
    </ant4eclipse:installedJREs>

    <ant4eclipse:jdtClassPathLibrary name="org.eclipse.jdt.junit.JUNIT_CONTAINER/3.8.1">
        <fileset dir="${basedir}/platform/plugins/org.junit_3.8.2.v20080602-1318"/>
    </ant4eclipse:jdtClassPathLibrary>

    <ant4eclipse:jdtClassPathLibrary name="org.eclipse.jdt.junit.JUNIT_CONTAINER/3.8.5">
        <fileset dir="${basedir}/platform/plugins/org.junit_3.8.2.v20080602-1318"/>
    </ant4eclipse:jdtClassPathLibrary>

    <ant4eclipse:jdtClassPathLibrary name="org.eclipse.jdt.junit.JUNIT_CONTAINER/4">
        <fileset dir="${basedir}/platform/plugins/org.junit_4.8.2.v4_8_2_v20110321-1705"/>
    </ant4eclipse:jdtClassPathLibrary>

    <!-- define the target platform location -->
    <ant4eclipse:targetPlatform id="simjr.target.platform">
      <location dir="${basedir}/platform" />
    </ant4eclipse:targetPlatform>

    <mkdir dir="${dist}"/>
    <mkdir dir="${dist}/configuration"/>
    <mkdir dir="${target}"/>
    <mkdir dir="${test.reports.dir}"/>

  </target>
  <target name="build" depends="init">

    <!-- iterate over all projects in the workspace -->
    <ant4eclipse:executeProjectSet workspaceDirectory="${workspaceDirectory}"
                                   allWorkspaceProjects="true">

    <!-- execute the contained build steps for all plug-in projects -->
    <ant4eclipse:forEachProject filter="(executeProjectSet.org.eclipse.pde.PluginNature=*)">
      <buildPlugin workspaceDirectory="${workspaceDirectory}"
                  projectname="${executeProjectSet.project.name}"
                  targetplatformid="simjr.target.platform"
                  destination="${dist}">
        <post-package-library>
          <echo>Finishing build of ${executeProjectSet.project.directory}</echo>
          <copy todir="${dist}/plugins">
            <fileset dir="${executeProjectSet.project.directory}">
              <include name="**/vendor/**" />
              <exclude name="**/.svn" />
            </fileset>
          </copy>
        </post-package-library>
      </buildPlugin>
    </ant4eclipse:forEachProject>

    </ant4eclipse:executeProjectSet>

    <copy todir="${dist}/plugins">
      <fileset dir="platform/plugins">
        <include name="*.jar" />
        <exclude name="org.eclipse.osgi_*.jar" />
      </fileset>
    </copy>
    
    <!-- Delete all the test jars -->
    <delete>
      <fileset dir="${dist}/plugins">
        <include name="*.test_*.jar" />
        <include name="*.test.source_*.jar" />
      </fileset>
    </delete>

    <copy todir="${dist}">
      <fileset dir="platform/plugins">
        <include name="org.eclipse.osgi_*.jar" />
      </fileset>

      <fileset dir="../simjr-resources" erroronmissingdir="false">
        <include name="**/grammars/**" />
        <include name="**/scenarios/**" />
        <include name="**/scripts/**" />
        <exclude name="**/.svn" />
      </fileset>
	  <fileset dir="../simjr-proprietary-resources" erroronmissingdir="false">
	    <include name="**/grammars/**" />
	    <include name="**/scenarios/**" />
	    <include name="**/scripts/**" />
	    <exclude name="**/.svn" />
	  </fileset>
    </copy>

    <copy todir="${dist}/configuration">
      <fileset dir="platform/configuration">
        <include name="**"/>
      </fileset>
    </copy>
    <copy todir="${dist}">
      <fileset dir="platform">
        <include name="*.bat" />
        <include name="*.sh" />
      </fileset>
    </copy>
  </target>

  <macrodef name="testplugin">
    <attribute name="projectDir"/>
    <attribute name="compiletimeClasspath"/>
    <attribute name="runtimeClasspath"/>

    <sequential>
      <!-- For some reason, fork="yes" causes classpath-related failures. In particular 
           getResourceAsStream() doesn't work for resource files in the source tree
           event though the folder is clearly on the classpath 
      -->
      <junit printsummary="on" haltonfailure="yes" fork="no" forkmode="perBatch" showoutput="true">
        <!--
          <sysproperty key="simjr.home" value="${basedir}"/>
        -->

        <!-- Add Soar binaries to path. Note that "Path" is case sensitive :( -->
        <!--
          <env key="PATH" path="${env.PATH}:${env.path}:${env.Path}:${basedir}/vendor/soar-8.6.3/bin"/>
        -->
        <classpath>
          <pathelement location="@{projectDir}/test" />
          <pathelement location="@{projectDir}/src/test/java" />
          <pathelement path="@{compiletimeClasspath}" />
          <pathelement path="@{runtimeClasspath}" />
        </classpath>

        <formatter type="xml" />

        <batchtest todir="${test.reports.dir}">
          <fileset dir="@{projectDir}/test" erroronmissingdir="false">
            <include name="**/*Test.java" />
            <include name="**/Test*.java" />
            <exclude name="**/AllTests.java" />

            <exclude name="**/SoarSpeakManagerTest.java" />
            <exclude name="**/VistaRhsFunctionCommTest.java" />
            <exclude name="**/MetersToMgrsRhsFunctionTest.java" />
            <exclude name="**/com/soartech/simjr/helosoar/**" />
          </fileset>
          <fileset dir="@{projectDir}/src/test/java" erroronmissingdir="false">
            <include name="**/*Test.java" />
            <include name="**/Test*.java" />
            <exclude name="**/AllTests.java" />

            <exclude name="**/SoarSpeakManagerTest.java" />
            <exclude name="**/VistaRhsFunctionCommTest.java" />
            <exclude name="**/MetersToMgrsRhsFunctionTest.java" />
            <exclude name="**/com/soartech/simjr/helosoar/**" />
          </fileset>
        </batchtest>
      </junit>
    </sequential>

  </macrodef>

  <target name="test" depends="init" unless="notest">

    <!-- iterate over all projects in the workspace -->
    <ant4eclipse:executeProjectSet workspaceDirectory="${workspaceDirectory}"
                                   allWorkspaceProjects="true">

      <!-- execute the contained build steps for all plug-in projects -->
      <ant4eclipse:forEachProject filter="(&amp;(executeProjectSet.org.eclipse.pde.PluginNature=*)(executeProjectSet.project.name=*.test)(!(executeProjectSet.project.name=com.soartech.simjr.test)))">
        <echo>Running tests in ${executeProjectSet.project.name}</echo>
        <ant4eclipse:executeJdtProject workspaceDirectory="${workspaceDirectory}" projectName="${executeProjectSet.project.name}">
          <ant4eclipse:forProject>
          <echo>Running tests for ${executeProjectSet.project.name}</echo>
          <testplugin projectDir="${executeProjectSet.project.directory}"
                      runtimeClasspath="${executeJdtProject.classpath.absolute.runtime}"
                      compiletimeClasspath="${executeJdtProject.classpath.absolute.compiletime}"/>
          </ant4eclipse:forProject>
        </ant4eclipse:executeJdtProject>
      </ant4eclipse:forEachProject>

    </ant4eclipse:executeProjectSet>

  </target>
  
  <target name="zip" depends="env-init" unless="nozip">
    <zip destfile="${dist.zip}">
      <zipfileset dir="${dist}" prefix="${dist.name}"/>
    </zip>
  </target>
  
  <target name="dist" depends="build,test,zip">
  </target>
</project>
